---
version: 2.1

orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.3
  aws-ecr: circleci/aws-ecr@8.0.0
  aws-ecs: circleci/aws-ecs@2.2.1
  jira: circleci/jira@1.3.1

executors:
  default:
    resource_class: large
    environment:
      NODE_OPTIONS: --max_old_space_size=8192
    docker:
      - image: cimg/node:17.7.2
    working_directory: ~/workspace

references:
  restore_dependencies_cache: &restore_dependencies_cache
    restore_cache:
      keys:
        - dependencies-{{ checksum "package_cache.json" }}
        - dependencies-

  restore_source_cache: &restore_source_cache
    restore_cache:
      keys:
        - source-{{ .Branch }}-{{ .Revision }}
        - source-{{ .Branch }}-

  generate_dependencies_cache_checksum: &generate_dependencies_cache_checksum
    run:
      name: Dependencies cache checksum
      command: |
        cat package.json > package_cache.json

commands:
  restore-source-checksum-cache:
    description: "This command will restore the source code from cache"
    steps:
      - *restore_source_cache
      - run: git checkout -- .
      - *generate_dependencies_cache_checksum
      - *restore_dependencies_cache

jobs:
  bootstrap:
    executor: default
    steps:
      - checkout
      - run: git gc
      - save_cache:
          key: source-{{ .Branch }}-{{ .Revision }}
          paths:
            - '.git'
      - run: git checkout -- .
      - *generate_dependencies_cache_checksum
      - *restore_dependencies_cache

      - run:
          name: Starting environment
          command: npm run bootstrap

      - save_cache:
          key: dependencies-{{ checksum "package_cache.json" }}
          paths:
            - 'node_modules'

  code-lint:
    executor: default
    steps:
      - restore-source-checksum-cache
      - run:
          name: Build web
          command: npm run lint

  unit-test:
    executor: default
    description: "This command will run the unit tests"
    steps:
      - restore-source-checksum-cache
      - run:
          name: Run tests
          command: npm run test

  sonar:
    executor: default
    description: "This command will run the sonar analysis"
    steps:
      - checkout
      - sonarcloud/scan

commit-workflow-filters: &commit-workflow-filters
  branches:
    only:
      - /feature\/.*/
      - develop
      - master
      - main
release-workflow-filters: &release-workflow-filters
  branches:
    only:
      - /release\/.*/

workflows:
  version: 2
  commit-workflow:
    jobs:
      - bootstrap:
          filters: *commit-workflow-filters
      - code-lint:
          context: SonarCloud
          requires:
            - bootstrap
          post-steps:
            - jira/notify:
                environment_type: testing
                job_type: deployment
          filters: *commit-workflow-filters
      - unit-test:
          context: SonarCloud
          name: unit-test
          requires:
            - code-lint
          post-steps:
            - jira/notify:
                environment_type: testing
                job_type: deployment
          filters: *commit-workflow-filters
      - sonar:
          context: SonarCloud
          requires:
            - unit-test
          post-steps:
            - jira/notify:
                environment_type: testing
                job_type: deployment
          filters: *commit-workflow-filters

  release-workflow:
    jobs:
      - bootstrap:
          filters: *release-workflow-filters
      - aws-ecr/build-and-push-image:
          context: SonarCloud
          name: build-image
          create-repo: true
          dockerfile: image/Dockerfile
          no-output-timeout: 20m
          profile-name: devops-007
          repo: devops
          skip-when-tags-exist: false
          tag: 'latest,001'
          requires:
            - bootstrap
          post-steps:
            - jira/notify:
                environment_type: production
                job_type: deployment
          filters: *release-workflow-filters
      - aws-ecs/deploy-service-update:
          context: SonarCloud
          family: "${PREFIX}-service"
          cluster-name: "${PREFIX}-cluster"
          container-image-name-updates: "container=${PREFIX}-service,tag=${TAG}"
          requires:
            - build-image
          post-steps:
            - jira/notify:
                environment_type: production
                job_type: deployment
          filters: *release-workflow-filters